@model WebApplication2.Models.BOOK_EDITION

@{
	double averageRating = Model.BOOK_REVIEW.Any() ? Model.BOOK_REVIEW.Average(br => br.ReviewRating) : 0;
	string randomString = Guid.NewGuid().ToString("N");
}

<div class="product-item bg-light mb-4">
	<div class="product-img position-relative overflow-hidden" style="height: 350px;">
		<img object-fit: cover; object-position: top center;" class="img-fluid w-100 h-100" src="~/Images/@Html.DisplayFor(model => model.BOOK_EDITION_IMAGE.FirstOrDefault().EditionImage)" alt="@Html.DisplayFor(model => model.EditionName)" />
		<div class="product-action">
			<a class="btn btn-outline-dark btn-square" href="@Url.Action("AddToCart", "BookCart", new { id = Model.EditionID })">
				<i class="fa fa-shopping-cart"></i>
			</a>
			@if (User.Identity.IsAuthenticated)
			{
				if (ViewBag.isMarked == true)
				{
					<a action="remove" class="btn btn-outline-dark btn-square" id="add-to-favorite-btn-@Model.EditionID-@randomString">
						<i class="fa-solid fa-heart"></i>
					</a>
				}
				else
				{
					<a action="add" class="btn btn-outline-dark btn-square" id="add-to-favorite-btn-@Model.EditionID-@randomString">
						<i class="far fa-heart"></i>
					</a>
				}
			}
			<a class="btn btn-outline-dark btn-square" href="@Url.Action("BookDetailsClient", "BOOK_EDITION", new { id = Model.EditionID })">
				<i class="fa fa-search"></i>
			</a>
		</div>
	</div>
	<div class="text-center py-4">
		@Html.ActionLink(Model.EditionName,
							"BookDetailsClient",
							"BOOK_EDITION",
							new { id = Model.EditionID },
							new { @class = "h6 text-decoration-none text-truncate" }
						)
		<div class="d-flex align-items-center justify-content-center mt-2">
			<h5>@Model.EditionPrice.ToString("#,##0").Replace(",", ".") VND</h5>
			@*<h6 class="text-muted ml-2"><del>$123.00</del></h6>*@
		</div>
		<div class="d-flex align-items-center justify-content-center mb-1">
			@for (int i = 0; i < Math.Floor(averageRating); i++)
			{
				<small class="fa fa-star text-primary mr-1"></small>
			}
			@for (int j = 0; j < 5 - Math.Floor(averageRating); j++)
			{
				<small class="far fa-star text-primary mr-1"></small>
			}
			<small>(@Model.BOOK_REVIEW.Count)</small>
		</div>
	</div>

	@if (User.Identity.IsAuthenticated && Model != null)
	{
		<script>
			document.querySelector("#add-to-favorite-btn-@Model.EditionID-@randomString").addEventListener('click', async (e) => {
				e.preventDefault();
				const isRemove = document.querySelector("#add-to-favorite-btn-@Model.EditionID-@randomString").getAttribute("action") == "remove";
				const action = isRemove ? 'removeFromFavorite' : 'addToFavorite';
				console.log("check")
				const respone = await fetch(`/FavoriteBooks/${action}`, {
					method: "POST",
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({
						bookId: @Model.EditionID
					})
				})

				const data = await respone.json();

				if (data.ok) {
					createToast("success", data.message);
					if (!isRemove) {
						document.querySelector("#add-to-favorite-btn-@Model.EditionID-@randomString").innerHTML = '<i class="fa-solid fa-heart"></i>';
						document.querySelector("#add-to-favorite-btn-@Model.EditionID-@randomString").setAttribute("action", "remove");
					} else {
						document.querySelector("#add-to-favorite-btn-@Model.EditionID-@randomString").innerHTML = '<i class="far fa-heart"></i>';
						document.querySelector("#add-to-favorite-btn-@Model.EditionID-@randomString").setAttribute("action", "add");
					}
					updateFavoriteBookAmount();
				} else {
					createToast("error", data.message);
				}
			})
		</script>
	}
</div>

